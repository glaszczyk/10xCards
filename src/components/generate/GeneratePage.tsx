import type { Flashcard } from "@/types";
import { useState } from "react";
import { FlashcardPreview } from "./FlashcardPreview";
import { GenerateForm, type GenerateFormData } from "./GenerateForm";
import { ManualFlashcardForm } from "./ManualFlashcardForm";

type PageState = "form" | "preview" | "manual";

export function GeneratePage() {
  const [pageState, setPageState] = useState<PageState>("form");
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [generatedFlashcards, setGeneratedFlashcards] = useState<Flashcard[]>([]);
  const [sourceText, setSourceText] = useState<string>("");

  const handleGenerate = async (formData: GenerateFormData) => {
    setIsGenerating(true);
    try {
      // TODO: Na przyszłość - integracja z OpenRouter AI
      // const flashcards = await generateFlashcardsWithAI(formData);
      
      // Simulate AI generation
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Mock generated flashcards
      const mockFlashcards: Flashcard[] = Array.from({ length: formData.cardCount }, (_, i) => ({
        id: `temp-${Date.now()}-${i}`,
        question: `Generated question ${i + 1} from: "${formData.sourceText.substring(0, 50)}..."`,
        answer: `Generated answer ${i + 1} based on the provided text. This is a sample answer that would be generated by AI.`,
        source: "ai" as const,
        ease_factor: 2.5,
        repetitions: 0,
        interval: 0,
        next_review_at: new Date().toISOString(),
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }));
      
      setSourceText(formData.sourceText);
      setGeneratedFlashcards(mockFlashcards);
      setPageState("preview");
    } catch (error) {
      console.error("Failed to generate flashcards:", error);
      throw error;
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSave = async (flashcards: Flashcard[]) => {
    setIsSaving(true);
    try {
      // TODO: Na przyszłość - zapisywanie do bazy danych
      // await saveFlashcardsToDatabase(flashcards);
      
      // Simulate saving
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      console.log("Flashcards saved:", flashcards);
      
      // TODO: Na przyszłość - przekierowanie do /learn
      alert("Flashcards saved successfully! Redirecting to learning...");
      
    } catch (error) {
      console.error("Failed to save flashcards:", error);
      throw error;
    } finally {
      setIsSaving(false);
    }
  };

  const handleBack = () => {
    setPageState("form");
    setGeneratedFlashcards([]);
  };

  const handleCreateManual = () => {
    setPageState("manual");
  };

  const handleGenerateAI = () => {
    setPageState("form");
  };

  if (pageState === "preview") {
    return (
      <FlashcardPreview
        flashcards={generatedFlashcards}
        sourceText={sourceText}
        onSave={handleSave}
        onBack={handleBack}
        isSaving={isSaving}
      />
    );
  }

  if (pageState === "manual") {
    return (
      <ManualFlashcardForm
        onSave={handleSave}
        onBack={handleBack}
        onGenerateAI={handleGenerateAI}
        sourceText={sourceText}
        isSaving={isSaving}
      />
    );
  }

  return (
    <GenerateForm
      onGenerate={handleGenerate}
      onCreateManual={handleCreateManual}
      isGenerating={isGenerating}
    />
  );
} 